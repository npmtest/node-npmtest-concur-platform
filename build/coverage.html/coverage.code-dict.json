{"/home/travis/build/npmtest/node-npmtest-concur-platform/test.js":"/* istanbul instrument in package npmtest_concur_platform */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-concur-platform/lib.npmtest_concur_platform.js":"/* istanbul instrument in package npmtest_concur_platform */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_concur_platform = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_concur_platform = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-concur-platform/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-concur-platform && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_concur_platform */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_concur_platform\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_concur_platform.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_concur_platform.rollup.js'] =\n            local.assetsDict['/assets.npmtest_concur_platform.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_concur_platform.__dirname + '/lib.npmtest_concur_platform.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/index.js":"exports.allocations = require('./client/allocations');\nexports.attendees = require('./client/attendees');\nexports.attendeeTypes = require('./client/attendeeTypes');\nexports.connectionRequests = require('./client/connectionRequests');\nexports.digitalTaxInvoices = require('./client/digitalTaxInvoices');\nexports.entries = require('./client/entries');\nexports.entryAttendeeAssociations = require('./client/entryAttendeeAssociations');\nexports.expenseGroupConfigurations = require('./client/expenseGroupConfigurations');\nexports.itemizations = require('./client/itemizations');\nexports.itinerary = require('./client/itinerary');\nexports.latestBookings = require('./client/latestBookings');\nexports.listItems = require('./client/listItems');\nexports.lists = require('./client/lists');\nexports.locations = require('./client/locations');\nexports.oauth = require('./client/oauth');\nexports.opportunities = require('./client/opportunities');\nexports.purchaseOrderReceipts = require('./client/purchaseOrderReceipts');\nexports.purchaseOrders = require('./client/purchaseOrders');\nexports.quickexpenses = require('./client/quickexpenses');\nexports.receipt = require('./client/receipt');\nexports.reports = require('./client/reports');\nexports.reportDigests = require('./client/reportDigests');\nexports.requests = require('./client/requests');\nexports.salesTaxValidationRequest = require('./client/salesTaxValidationRequests');\nexports.suppliers = require('./client/suppliers');\nexports.travelProfile = require('./client/travelProfile');\nexports.user = require('./client/user');\nexports.utils = require('./client/utils');\nexports.vendors = require('./client/vendors');\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/client/allocations/index.js":"var utils = require('../utils/utils.js');\n\nvar url = utils.serviceURL + '/api/v3.0/expense/allocations';\n\nmodule.exports = {\n  get: function (options) {\n    options.resourceURL = url;\n    return utils.get(options);\n  }\n};","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/client/utils/utils.js":"var request = require('request'),\n    xml = require('./xml'),\n    Q = require('q');\n\nexports.serviceURL = process.env.CONCUR_BASE_URI || \"https://www.concursolutions.com\";\n\nvar DEFAULTS = {\n    userAgent:'Concur-platform-sdk-js',\n    contentType: 'application/json'\n};\n\nvar buildError = function(options, response, body) {\n    var message;\n    try {\n      message = JSON.parse(body);\n    } catch(e) {\n      message = 'Failed to parse response body';\n    }\n    return {\n        'statusCode': response && response.statusCode,\n        'Message': message && message.Error && message.Error.Message,\n        'resourceURL': options && options.resourceURL\n    };\n};\n\nvar buildHeader = function(options) {\n    return {\n      'Authorization' : 'OAuth '+ (options.oauthToken || options.token || options.oAuthToken),\n      'Accept': DEFAULTS.contentType,\n      'Content-Type': options.contentType || DEFAULTS.contentType,\n      'User-Agent': DEFAULTS.userAgent\n    };\n};\n\nvar buildUrl = function(options) {\n  if (options.id) {\n    return options.resourceURL +'/'+ options.id;\n  } else {\n    return options.resourceURL;\n  }\n};\n\nexports.delete = function(options) {\n    var deferred = Q.defer();\n\n    var headers = buildHeader(options);\n\n    request.del({url: buildUrl(options), headers:headers}, function(error, response, body) {\n        // Error with the actual request\n        if (error){\n            return deferred.reject(error);\n        }\n\n        // Non-204 HTTP response code\n        if (response.statusCode != 204) {\n            return deferred.reject(buildError(options, response, body));\n        }\n\n        deferred.resolve(response.statusCode);\n\n    });\n    return deferred.promise;\n};\n\nexports.send = function(options) {\n    var deferred = Q.defer();\n\n    var headers = buildHeader(options);\n\n    request.post({url:options.resourceURL, headers:headers, body:JSON.stringify(options.body)}, function(error, response, body) {\n        // Error with the actual request\n        if (error) {\n            return deferred.reject(error);\n        }\n\n        // Non-200 HTTP response code\n        if (response.statusCode != 200) {\n            return deferred.reject(buildError(options, response, body));\n        }\n\n\n        var bodyJSON = body ? JSON.parse(body) : {};\n\n        // 200, but Error in token payload\n        if (bodyJSON.Error) return deferred.reject({'error':bodyJSON.Message});\n\n        deferred.resolve(bodyJSON);\n    });\n    return deferred.promise;\n};\n\nexports.get = function(options) {\n    var deferred = Q.defer();\n\n    var headers = buildHeader(options);\n\n    request({url:buildUrl(options), qs:options.queryParameters, headers:headers}, function(error, response, body) {\n        // Error with the actual request\n        if (error) {\n            return deferred.reject(error);\n        }\n\n        // Non-200 HTTP response code\n        if (response.statusCode != 200) {\n            return deferred.reject(buildError(options, response, body));\n        }\n\n        var parsedBody;\n        if (options.contentType) {\n            xml.getCleansedObjectFromXmlBody(body, function (err, result) {\n                if (err){\n                    parsedBody = err;\n                } else {\n                    parsedBody = result;\n                }\n            });\n        } else {\n            parsedBody = JSON.parse(body);\n        }\n\n        // 200, but Error in token payload\n        if (parsedBody.Error) return deferred.reject({'error':parsedBody.Message});\n        deferred.resolve(parsedBody);\n    });\n    return deferred.promise;\n};\n\nexports.put = function(options) {\n    var deferred = Q.defer();\n\n    var headers = buildHeader(options);\n\n    request.put({url:buildUrl(options), headers:headers, body:JSON.stringify(options.body)}, function(error, response, body) {\n        // Error with the actual request\n        if (error) {\n            return deferred.reject(error);\n        }\n\n        // Non-204 HTTP response code\n        if (response.statusCode != 204) {\n            return deferred.reject(buildError(options, response, body));\n        }\n\n        deferred.resolve(response.statusCode);\n\n    });\n    return deferred.promise;\n};\n","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/client/utils/xml.js":"var xml2js = require('xml2js');\nvar _ = require('underscore');\n\n/* jshint -W030 */\n\nmodule.exports.getCleansedObjectFromXmlBody = function (xmlBody, callback) {\n    if (!callback || typeof xmlBody !== \"string\" || xmlBody === \"\"){\n        callback && callback(\"invalid input\", null);\n        return;\n    }\n\n    var cleanseXmlObject = function (obj){   \n        // collapse unnecessary arrays since every level of XML is returned in an array\n        while (_.isArray(obj) && obj.length === 1) {\n            obj = obj[0];\n        }\n\n        if (typeof obj === \"object\") {\n            _.keys(obj).forEach(function (item){\n                obj[item] = cleanseXmlObject(obj[item]);\n            });\n        }\n\n        return obj;\n    };\n\n    xml2js.parseString (xmlBody, function (err, result) {\n        callback(err, !err && cleanseXmlObject(result));\n    });\n\n    return true;\n};\n","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/client/attendees/index.js":"var utils = require('../utils/utils.js');\n\nvar url = utils.serviceURL + '/api/v3.0/expense/attendees';\n\nmodule.exports = {\n  get: function (options) {\n    options.resourceURL = url;\n    return utils.get(options);\n  },\n  send: function(options) {\n    options.resourceURL = url;\n    return utils.send(options);\n  },\n  put: function(options) {\n    options.resourceURL = url;\n    return utils.put(options);\n  },\n  delete:function(options) {\n    options.resourceURL = url;\n    return utils.delete(options);\n  }\n};","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/client/attendeeTypes/index.js":"var utils = require('../utils/utils.js');\n\nvar url = utils.serviceURL + '/api/v3.0/expense/attendeetypes';\n\nmodule.exports = {\n  get: function (options) {\n    options.resourceURL = url;\n    return utils.get(options);\n  },\n  send: function(options) {\n    options.resourceURL = url;\n    return utils.send(options);\n  },\n  put: function(options) {\n    options.resourceURL = url;\n    return utils.put(options);\n  },\n  delete:function(options) {\n    options.resourceURL = url;\n    return utils.delete(options);\n  }\n};","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/client/connectionRequests/index.js":"var utils = require('../utils/utils.js');\n\nvar url = utils.serviceURL + '/api/v3.0/common/connectionrequests';\n\nmodule.exports = {\n  get: function (options) {\n    options.resourceURL = url;\n    return utils.get(options);\n  },\n  send: function(options) {\n    options.resourceURL = url;\n    return utils.send(options);\n  },\n  put: function(options) {\n    options.resourceURL = url;\n    return utils.put(options);\n  },\n  delete:function(options) {\n    options.resourceURL = url;\n    return utils.delete(options);\n  }\n};","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/client/digitalTaxInvoices/index.js":"var utils = require('../utils/utils.js');\n\nvar url = utils.serviceURL + '/api/v3.0/expense/digitaltaxinvoices';\n\nmodule.exports = {\n  get: function (options) {\n    options.resourceURL = url;\n    return utils.get(options);\n  },\n  put: function(options) {\n    options.resourceURL = url;\n    return utils.put(options);\n  }\n};","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/client/entries/index.js":"var utils = require('../utils/utils.js');\n\nvar url = utils.serviceURL + '/api/v3.0/expense/entries';\n\nmodule.exports = {\n  get: function (options) {\n    options.resourceURL = url;\n    return utils.get(options);\n  },\n  send: function(options) {\n    options.resourceURL = url;\n    return utils.send(options);\n  },\n  put: function(options) {\n    options.resourceURL = url;\n    return utils.put(options);\n  },\n  delete:function(options) {\n    options.resourceURL = url;\n    return utils.delete(options);\n  }\n};","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/client/entryAttendeeAssociations/index.js":"var utils = require('../utils/utils.js');\n\nvar url = utils.serviceURL + '/api/v3.0/expense/entryattendeeassociations';\n\nmodule.exports = {\n  get: function (options) {\n    options.resourceURL = url;\n    return utils.get(options);\n  },\n  send: function(options) {\n    options.resourceURL = url;\n    return utils.send(options);\n  },\n  put: function(options) {\n    options.resourceURL = url;\n    return utils.put(options);\n  },\n  delete:function(options) {\n    options.resourceURL = url;\n    return utils.delete(options);\n  }\n};","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/client/expenseGroupConfigurations/index.js":"var utils = require('../utils/utils.js');\n\nvar url = utils.serviceURL + '/api/v3.0/expense/expensegroupconfigurations';\n\nmodule.exports = {\n  get: function (options) {\n    options.resourceURL = url;\n    return utils.get(options);\n  }\n};","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/client/itemizations/index.js":"var utils = require('../utils/utils.js');\n\nvar url = utils.serviceURL + '/api/v3.0/expense/itemizations';\n\nmodule.exports = {\n  get: function (options) {\n    options.resourceURL = url;\n    return utils.get(options);\n  },\n  send: function(options) {\n    options.resourceURL = url;\n    return utils.send(options);\n  }\n};","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/client/itinerary/index.js":"var request = require('request'),\n    utils = require('../utils/utils.js'),\n    xml = require('../utils/xml'),\n    Q = require('q');\n\nvar itineraryURL = utils.serviceURL + '/api/travel/trip/v1.1';\n\nmodule.exports = {\n    get: function(options) {\n        var deferred = Q.defer();\n\n        var headers = {\n            'Authorization' : 'OAuth ' + options.oauthToken,\n            'Accept' : 'application/json',\n            'User-Agent':'Concur-platform-sdk-js'\n        };\n\n        var itinURL = itineraryURL;\n        if (options.id) {\n            itinURL =  itinURL + '/'+options.id;\n        }\n\n        request({url:itinURL, headers:headers}, function(error, response, body) {\n            // Error with the actual request\n            if (error) {\n                return deferred.reject(error);\n            }\n\n            // Non-200 HTTP response code\n            if (response.statusCode != 200) {\n                return deferred.reject({'error':'Itinerary URL ('+itineraryURL+') returned HTTP status code '+response.statusCode});\n            }\n\n            if (options.id) {\n                xml.getCleansedObjectFromXmlBody(body, function (err, result) {\n                    if (err){\n                        deferred.resolve(err);\n                    } else {\n                        deferred.resolve(result);\n                    }\n                });\n            } else {\n                var bodyJSON = JSON.parse(body);\n\n                // 200, but Error in token payload\n                if (bodyJSON.Error) return deferred.reject({'error':bodyJSON.Message});\n                // parse and map access token\n                deferred.resolve(bodyJSON);\n            }\n        });\n        return deferred.promise;\n    },\n    send: function(options) {\n        var deferred = Q.defer();\n\n        var headers = {\n            'Authorization' : 'OAuth '+options.oauthToken,\n            'Accept':'application/json',\n            'Content-Type':options.contentType,\n            'User-Agent':'Concur-platform-sdk-js'\n        };\n\n        request.post({url:itineraryURL, headers:headers, body:options.body}, function(error, response, body) {\n            // Error with the actual request\n            if (error) {\n                return deferred.reject(error);\n            }\n\n            // Non-200 HTTP response code\n            if (response.statusCode != 200) {\n                return deferred.reject({'error':'Itinerary URL ('+itineraryURL+') returned HTTP status code '+response.statusCode});\n            }\n\n            xml.getCleansedObjectFromXmlBody(body, function (err, result) {\n                if (err){\n                    deferred.resolve(err);\n                } else {\n                    delete result.Itinerary.$;\n                    deferred.resolve(result);\n                }\n            });\n        });\n        return deferred.promise;\n    }\n};","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/client/latestBookings/index.js":"var utils = require('../utils/utils.js');\n\nvar url = utils.serviceURL + '/api/v3.0/insights/latestbookings';\n\nmodule.exports = {\n  get: function (options) {\n    options.resourceURL = url;\n    return utils.get(options);\n  }\n};","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/client/listItems/index.js":"var utils = require('../utils/utils.js');\n\nvar url = utils.serviceURL + '/api/v3.0/common/listitems';\n\nmodule.exports = {\n  get: function (options) {\n    options.resourceURL = url;\n    return utils.get(options);\n  },\n  send: function(options) {\n    options.resourceURL = url;\n    return utils.send(options);\n  },\n  put: function(options) {\n    options.resourceURL = url;\n    return utils.put(options);\n  },\n  delete:function(options) {\n    options.resourceURL = url;\n    return utils.delete(options);\n  }\n};","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/client/lists/index.js":"var utils = require('../utils/utils.js');\n\nvar url = utils.serviceURL + '/api/v3.0/common/lists';\n\nmodule.exports = {\n  get: function (options) {\n    options.resourceURL = url;\n    return utils.get(options);\n  },\n  send: function(options) {\n    options.resourceURL = url;\n    return utils.send(options);\n  },\n  put: function(options) {\n    options.resourceURL = url;\n    return utils.put(options);\n  }\n};","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/client/locations/index.js":"var utils = require('../utils/utils.js');\n\nvar url = utils.serviceURL + '/api/v3.0/common/locations';\n\nmodule.exports = {\n  get: function (options) {\n    options.resourceURL = url;\n    return utils.get(options);\n  }\n};","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/client/oauth/index.js":"var nativeFlow = require('./nativeFlow'),\n    getAccessToken = require('./getAccessToken'),\n    revokeToken = require('./revokeToken'),\n    refreshToken = require('./refreshToken');\n\n\nmodule.exports = {\n    native: nativeFlow.requestToken,\n    appCenter: getAccessToken.accessToken,\n    revokeToken: revokeToken.send,\n    refreshToken: refreshToken.send\n};","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/client/oauth/nativeFlow.js":"var request = require('request'),\n    utils = require('../utils/utils.js'),\n    Q = require('q');\n\nmodule.exports = {\n    requestToken: function(options) {\n        var deferred = Q.defer();\n\n        var concurAccessTokenURL = utils.serviceURL + '/net2/oauth2/accesstoken.ashx';\n\n        var headers = {\n            'Authorization' : 'Basic ' + new Buffer(options.username+':'+options.password).toString('base64'),\n            'X-ConsumerKey' : options.consumerKey,\n            'Accept' : 'application/json',\n            'User-Agent':'Concur-platform-sdk-js'\n        };\n\n        request({url:concurAccessTokenURL, headers:headers}, function(error, response, body) {\n            // Error with the actual request\n            if (error) {\n                return deferred.reject(error);\n            }\n\n            // Non-200 HTTP response code\n            if (response.statusCode != 200) {\n                return deferred.reject({'error':'Auth URL ('+concurAccessTokenURL+') returned HTTP status code '+response.statusCode});\n            }\n\n            var bodyJSON = JSON.parse(body);\n\n            // 200, but Error in token payload\n            if (bodyJSON.Error) return deferred.reject({'error':bodyJSON.Message});\n            // parse and map access token\n            var token = {};\n            token.value = bodyJSON.Access_Token.Token;\n            token.instanceUrl = bodyJSON.Access_Token.Instance_Url;\n            token.expiration = bodyJSON.Access_Token.Expiration_date;\n            token.refreshToken = bodyJSON.Access_Token.Refresh_Token;\n            deferred.resolve(token);\n        });\n\n        return deferred.promise;\n    }\n};","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/client/oauth/getAccessToken.js":"var request = require('request'),\n    utils = require('../utils/utils.js'),\n    util = require('util'),\n    Q = require('q');\n\n\n\nmodule.exports = {\n    accessToken: function(options) {\n        var deferred = Q.defer();\n\n        var concurAccessTokenURL = util.format('%s/net2/oauth2/getaccesstoken.ashx?code=%s&client_id=%s&client_secret=%s',\n            utils.serviceURL,\n            options.code,\n            options.client_id,\n            options.client_secret);\n\n        var headers = {\n            'Accept' : 'application/json',\n            'User-Agent':'Concur-platform-sdk-js'\n        };\n\n        request({url:concurAccessTokenURL, headers:headers}, function(error, response, body) {\n            // Error with the actual request\n            if (error) {\n                return deferred.reject(error);\n            }\n\n            // Non-200 HTTP response code\n            if (response.statusCode != 200) {\n                return deferred.reject({\n                    'error':'Auth URL ('+concurAccessTokenURL+') returned HTTP status code '+response.statusCode\n                });\n            }\n\n            var bodyJSON = JSON.parse(body);\n\n            // 200, but Error in token payload\n            if (bodyJSON.Error) return deferred.reject({'error':bodyJSON.Message});\n            // parse and map access token\n            var token = {};\n            token.value = bodyJSON.Access_Token.Token;\n            token.instanceUrl = bodyJSON.Access_Token.Instance_Url;\n            token.expiration = bodyJSON.Access_Token.Expiration_date;\n            token.refreshToken = bodyJSON.Access_Token.Refresh_Token;\n            deferred.resolve(token);\n        });\n        return deferred.promise;\n    }\n};","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/client/oauth/revokeToken.js":"var utils = require('../utils/utils.js'),\n    util = require('util');\n\nvar url = utils.serviceURL + '/net2/oauth2/revoketoken.ashx';\n\nmodule.exports = {\n  send: function(options) {\n    var tempURL;\n    if (options.token) {\n      tempURL = util.format('%s?token=%s', url, options.token);\n    } else {\n      tempURL = util.format('%s?client_id=%s&user=%s', url, options.client_id, options.loginId);\n    }\n    options.resourceURL = tempURL;\n    return utils.send(options);\n  }\n};\n\n\n/*\n GET https://www.concursolutions.com/net2/oauth2/revoketoken.ashx\n ?token={Access Token}\n */\n","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/client/oauth/refreshToken.js":"var utils = require('../utils/utils.js'),\n    util = require('util');\n\nvar url = utils.serviceURL + '/net2/oauth2/getaccesstoken.ashx';\n\nmodule.exports = {\n  send: function(options) {\n    var tempURL = util.format('%s?refresh_token=%s&client_id=%s&client_secret=%s',\n        url,\n        options.refreshToken,\n        options.client_id,\n        options.client_secret);\n    options.resourceURL = tempURL;\n    return utils.send(options);\n  }\n};\n\n\n/*\n GET https://www.concursolutions.com/net2/oauth2/getaccesstoken.ashx\n ?refresh_token={Refresh Token}\n &client_id={Consumer Key}&client_secret={Consumer Secret}\n */\n","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/client/opportunities/index.js":"var utils = require('../utils/utils.js');\n\nvar url = utils.serviceURL + '/api/v3.0/insights/opportunities';\n\nmodule.exports = {\n  get: function (options) {\n    options.resourceURL = url;\n    return utils.get(options);\n  }\n};","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/client/purchaseOrderReceipts/index.js":"var utils = require('../utils/utils.js');\n\nvar url = utils.serviceURL + '/api/v3.0/invoice/purchaseorderreceipts';\n\nmodule.exports = {\n  put: function(options) {\n    options.resourceURL = url;\n    return utils.put(options);\n  }\n};","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/client/purchaseOrders/index.js":"var utils = require('../utils/utils.js');\n\nvar url = utils.serviceURL + '/api/v3.0/invoice/purchaseorders';\n\nmodule.exports = {\n  get: function (options) {\n    options.resourceURL = url;\n    return utils.get(options);\n  },\n  send: function(options) {\n    options.resourceURL = url;\n    return utils.send(options);\n  },\n  put: function(options) {\n    options.resourceURL = url;\n    return utils.put(options);\n  }\n};","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/client/quickexpenses/index.js":"var utils = require('../utils/utils.js');\n\nvar url = utils.serviceURL + '/api/v3.0/expense/quickexpenses';\n\nmodule.exports = {\n    get: function (options) {\n        if (options.quickexpenseId) {\n            options.id = options.quickexpenseId;\n        }\n        options.resourceURL = url;\n        return utils.get(options);\n    },\n    send: function(options) {\n        options.resourceURL = url;\n        return utils.send(options);\n    },\n    put: function(options) {\n        if (options.quickexpenseId) {\n            options.id = options.quickexpenseId;\n        }\n        options.resourceURL = url;\n        return utils.put(options);\n    },\n    delete:function(options) {\n        if (options.quickexpenseId) {\n            options.id = options.quickexpenseId;\n        }\n        options.resourceURL = url;\n        return utils.delete(options);\n    }\n};","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/client/receipt/index.js":"var getImage = require('./loadImageFromURL'),\n    image = require('./post'),\n    utils = require('../utils/utils.js');\n\nvar serviceURL = utils.serviceURL,\n    receiptImageURL = serviceURL + '/api/v3.0/expense/receiptimages',\n    eReceiptURL = serviceURL + '/api/v3.0/ereceipt/receipts',\n    eReceiptWithImageURL = serviceURL + '/api/v3.0/common/receipts',\n    entryImageUrl = serviceURL + '/api/image/v1.0/expenseentry/',\n    paymentRequest = serviceURL + '/api/image/v1.0/invoice/',\n    reportImageUrl = serviceURL + '/api/image/v1.0/report/';\n\nmodule.exports = {\n    send: function(options) {\n        var requestBody = {};\n        requestBody.oauthToken = options.oauthToken;\n\n        if (options.data && options.data.MatchingFact) {\n            requestBody.url = eReceiptWithImageURL;\n            requestBody.body = JSON.stringify(options.data);\n            requestBody.error = \"eReceipt with Image URL: \" + eReceiptWithImageURL;\n        } else if(options.entryId) {\n            var tempURL = entryImageUrl;\n            tempURL = tempURL +'/'+options.entryId;\n            requestBody.body = options.image || options.imageURL;\n            requestBody.url = tempURL;\n            requestBody.error = \"Entry image URL: \" + entryImageUrl;\n        } else if (options.requestId) {\n            var tempPaymentRequestURL = paymentRequest;\n            tempPaymentRequestURL = tempPaymentRequestURL +'/'+options.requestId;\n            requestBody.body = options.image || options.imageURL;\n            requestBody.url = tempPaymentRequestURL;\n            requestBody.error = \"Payment Request Image URL \" + tempPaymentRequestURL;\n        } else if (options.reportId) {\n            var tempReceiptURL = reportImageUrl;\n            tempReceiptURL = tempReceiptURL +'/'+options.reportId;\n            requestBody.body = options.image || options.imageURL;\n            requestBody.url = tempReceiptURL;\n            requestBody.error = \"Report Image URL \" + tempReceiptURL;\n        } else if (options.image) {\n            requestBody.url = receiptImageURL;\n            requestBody.body = options.image;\n            requestBody.error = \"Receipt Image URL: \" + receiptImageURL;\n        } else if (options.imageURL) {\n            requestBody.url = receiptImageURL;\n            requestBody.error = \"Receipt Image URL: \" + receiptImageURL;\n        } else {\n            requestBody.url = eReceiptURL;\n            requestBody.body = JSON.stringify(options.data);\n            requestBody.error = \"eReceipt Image URL: \" + eReceiptURL;\n        }\n\n        if (options.imageURL) {\n            requestBody.imageURL = options.imageURL;\n            return getImage.loadImageFromURLAndPost(requestBody);\n        } else {\n            requestBody.contentType = options.contentType;\n            return image.post(requestBody);\n        }\n    },\n\n    get: function (options) {\n        if (options.receiptId) {\n            options.id = options.receiptId;\n        }\n        options.resourceURL = receiptImageURL;\n        return utils.get(options);\n    },\n\n    delete:function(options) {\n        if (options.receiptId) {\n            options.id = options.receiptId;\n        }\n        options.resourceURL = receiptImageURL;\n        return utils.delete(options);\n    }\n};","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/client/receipt/loadImageFromURL.js":"var request = require('request'),\n    image = require('./post');\n    Q = require('q');\n\nexports.loadImageFromURLAndPost = function (options) {\n  var deferred = Q.defer();\n  // Make request to the image url\n  request({url: options.imageURL, encoding: null}, function (err, res, body) {\n    // Error with the actual request\n    if (err){\n      return deferred.reject(err);\n    }\n\n    // Non-200 HTTP response code\n    if (res.statusCode != 200){\n      return deferred.reject({'error':res.statusCode, 'body':body});\n    }\n\n    options.contentType = res.headers['content-type'];\n    options.body = body;\n    image.post(options)\n    .then(function (imageId) {\n      deferred.resolve(imageId);\n    })\n    .fail(function (error) {\n      deferred.reject(error);\n    });\n  });\n  return deferred.promise;\n};","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/client/receipt/post.js":"var request = require('request'),\n    Q = require('q');\n\nexports.post = function(options) {\n    var deferred = Q.defer();\n\n    var headers = {\n        'Authorization' : 'OAuth '+options.oauthToken,\n        'Accept':'application/json',\n        'Content-Type':options.contentType,\n        'User-Agent':'Concur-platform-sdk-js'\n    };\n\n    request.post({url:options.url, headers:headers, body:options.body}, function(error, response, body) {\n        // Error with the actual request\n        if (error) {\n            return deferred.reject(error);\n        }\n\n        // Non-200 HTTP response code\n        if (response.statusCode > 399){\n            return deferred.reject({'error':options.error+' returned HTTP status code '+response.statusCode, 'body':body});\n        }\n\n        var bodyJSON = JSON.parse(body);\n\n        // 200, but Error in token payload\n        if (bodyJSON.Message) return deferred.reject({'error':bodyJSON.Message});\n\n        // parse and map receipt ID\n        if (bodyJSON.ID || bodyJSON.Id) {\n            deferred.resolve(bodyJSON.ID || bodyJSON.Id);\n        } else {\n            deferred.resolve(bodyJSON.ReceiptID);\n        }\n\n    });\n    return deferred.promise;\n};","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/client/reports/index.js":"var utils = require('../utils/utils.js');\n\nvar url = utils.serviceURL + '/api/v3.0/expense/reports';\n\nmodule.exports = {\n  get: function (options) {\n    options.resourceURL = url;\n    return utils.get(options);\n  },\n  send: function(options) {\n    options.resourceURL = url;\n    return utils.send(options);\n  },\n  put: function(options) {\n    options.resourceURL = url;\n    return utils.put(options);\n  }\n};","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/client/reportDigests/index.js":"var utils = require('../utils/utils.js');\n\nvar url = utils.serviceURL + '/api/v3.0/expense/reportdigests';\n\nmodule.exports = {\n  get: function (options) {\n    options.resourceURL = url;\n    return utils.get(options);\n  }\n};","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/client/requests/index.js":"var utils = require('../utils/utils.js');\n\nvar url = utils.serviceURL + '/api/v3.0/travelrequest/requests';\n\nmodule.exports = {\n  get: function (options) {\n    options.resourceURL = url;\n    return utils.get(options);\n  }\n};","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/client/salesTaxValidationRequests/index.js":"var utils = require('../utils/utils.js');\n\nvar url = utils.serviceURL + '/api/v3.0/invoice/salestaxvalidationrequest';\n\nmodule.exports = {\n  get: function (options) {\n    options.resourceURL = url;\n    return utils.get(options);\n  },\n  put: function(options) {\n    options.resourceURL = url;\n    return utils.put(options);\n  }\n};","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/client/suppliers/index.js":"var utils = require('../utils/utils.js');\n\nvar url = utils.serviceURL + '/api/v3.0/common/suppliers';\n\nmodule.exports = {\n  get: function (options) {\n    options.resourceURL = url;\n    return utils.get(options);\n  }\n};","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/client/travelProfile/index.js":"var utils = require('../utils/utils.js');\n\nvar url = utils.serviceURL + '/api/travelprofile/v1.0/profile';\n\nmodule.exports = {\n  get: function (options) {\n    options.resourceURL = url;\n    options.contentType = 'application/xml';\n    var travelProfile = utils.get(options);\n    travelProfile.then(function(user) {\n      delete user.ProfileResponse.$;\n    });\n    return travelProfile;\n  }\n};","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/client/user/index.js":"var utils = require('../utils/utils.js');\n\nvar url = utils.serviceURL + '/api/user/v1.0/User/';\n\nmodule.exports = {\n    get: function (options) {\n        options.resourceURL = url;\n        return utils.get(options);\n    },\n    send: function(options) {\n        options.resourceURL = url;\n        return utils.send(options);\n    }\n};","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/client/utils/index.js":"module.exports = require(\"./utils\");\n\n// sub utils\nmodule.exports.xml = require(\"./xml\");","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/client/vendors/index.js":"var utils = require('../utils/utils.js');\n\nvar url = utils.serviceURL + '/api/v3.0/invoice/vendors';\n\nmodule.exports = {\n  get: function (options) {\n    options.resourceURL = url;\n    return utils.get(options);\n  },\n  send: function(options) {\n    options.resourceURL = url;\n    return utils.send(options);\n  },\n  put: function(options) {\n    options.resourceURL = url;\n    return utils.put(options);\n  },\n  delete:function(options) {\n    options.resourceURL = url;\n    return utils.delete(options);\n  }\n};","/home/travis/build/npmtest/node-npmtest-concur-platform/node_modules/concur-platform/Gruntfile.js":"module.exports = function(grunt){\n  // helper to automatically call grunt.loadNpmTasks('foo') for all package.json dependencies matching the pattern grunt-*\n  require('load-grunt-tasks')(grunt);\n\n  grunt.initConfig({\n    // plugin configuration details here\n    jshint: {\n      all: {\n        options: {\n          expr: true\n        },\n        src: ['Gruntfile.js', 'lib/**/*.js', 'test/**/*.js']\n      }\n    },\n    env: {\n      dev: {\n        APPLICATION_NAME: 'node-utils',\n        NODE_ENV: 'test'\n      }\n    },\n    mochaTest: {\n      test: {\n        options: {\n          reporter: 'spec',\n          ui: 'bdd',\n          captureFile: 'results.txt', // Optionally capture the reporter output to a file\n          quiet: false // Optionally suppress output to standard out (defaults to false)\n        },\n        src: ['test/**/*.js']\n      },\n      'ci-shippable': {\n        options: {\n          reporter: 'xunit',\n          captureFile: 'shippable/testresults/result.xml' // Optionally capture the reporter output to a file\n        },\n        src: ['test/**/*.js']\n      }\n    }\n  });\n\n  // register tasks\n  grunt.registerTask('default', ['npm-install', 'jshint', 'env:dev', 'mochaTest:test']);\n  grunt.registerTask('ci-shippable', ['jshint', 'env:dev', 'mochaTest:ci-shippable']);\n};\n"}